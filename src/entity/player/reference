void Player::Inputs(GLFWwindow* window){

            if (glfwGetKey(window, GLFW_KEY_W) == GLFW_PRESS){
                Position += speed * Orientation;
            }
            if (glfwGetKey(window, GLFW_KEY_A) == GLFW_PRESS){
                Position += speed * -glm::normalize(glm::cross(Orientation, Up));
            }
            if (glfwGetKey(window, GLFW_KEY_S) == GLFW_PRESS){
                Position += speed * -Orientation;
            }
            if (glfwGetKey(window, GLFW_KEY_D) == GLFW_PRESS){
                Position += speed * glm::normalize(glm::cross(Orientation, Up));;
            }

            if (glfwGetKey(window, GLFW_KEY_SPACE) == GLFW_PRESS){
                Position += speed * Up;
            }
            if (glfwGetKey(window, GLFW_KEY_LEFT_CONTROL) == GLFW_PRESS){
                Position += speed * -Up;
            }        

            if (glfwGetKey(window, GLFW_KEY_LEFT_SHIFT) == GLFW_PRESS){
                speed = 0.05f;
            }
            else if (glfwGetKey(window, GLFW_KEY_LEFT_SHIFT) == GLFW_RELEASE){
                speed = 0.01f;
            }    



            if (glfwGetKey(window, GLFW_KEY_Q) == GLFW_PRESS){
                if ( !pausePressedLastFrame) {
                    paused = !paused;  // Toggle only when key is first pressed
                    std::cout << "pause Toggled\n";
                }

                pausePressedLastFrame = true;
                
            }else if (glfwGetKey(window, GLFW_KEY_Q) == GLFW_RELEASE){
                pausePressedLastFrame = false;
            }
            if (glfwGetKey(window, GLFW_KEY_GRAVE_ACCENT) == GLFW_PRESS){
                if (!debugPressedLastFrame) {
                    debugEnabled = !debugEnabled;  // Toggle only when key is first pressed
                    std::cout << "debug Toggled\n";
                }

                debugPressedLastFrame = true;
                
            }else if (glfwGetKey(window, GLFW_KEY_GRAVE_ACCENT) == GLFW_RELEASE){
                debugPressedLastFrame = false;
            }
            
            

            if (glfwGetMouseButton(window, GLFW_MOUSE_BUTTON_LEFT) == GLFW_PRESS){
                glfwSetInputMode(window, GLFW_CURSOR, GLFW_CURSOR_HIDDEN);
                if (firstClick)
                {
                    mouseLocked = true;
                }
            }    

            if (glfwGetMouseButton(window, GLFW_MOUSE_BUTTON_RIGHT) == GLFW_PRESS){

                double mouseX;
                double mouseY;

                glfwGetCursorPos(window, &mouseX, &mouseY);

                float rotX = sensitivity * (float)(mouseY - (height / 2)) / height;
                float rotY = sensitivity * (float)(mouseX - (width / 2)) / width;

                glm::vec3 newOrientation = glm::rotate(Orientation, glm::radians(-rotX), glm::normalize(glm::cross(Orientation, Up)));

                if (abs(glm::angle(newOrientation, Up) - glm::radians(90.0f)) <= glm::radians(85.0f))
                {
                    Orientation = newOrientation;
                }

                Orientation = glm::rotate(Orientation, glm::radians(-rotY), Up);

                glfwSetCursorPos(window, (width /2 ), (height/2));
            }    

            if (glfwGetKey(window, GLFW_KEY_ESCAPE) == GLFW_PRESS){
                glfwSetInputMode(window, GLFW_CURSOR, GLFW_CURSOR_NORMAL);
                mouseLocked = false;
                firstClick = true;
            }    
}